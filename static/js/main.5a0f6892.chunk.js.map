{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","utils.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validator","useState","Math","random","toFixed","slice","id","touched","setTouched","validated","setValidated","hasError","htmlFor","type","classNames","event","onBlur","isURLValid","url","test","isStrFilled","val","NewMovie","onAdd","emptyMovie","count","setCount","setMovie","isFormValid","trim","movieFildsValidator","field","validFn","trimedVal","prev","handleChange","target","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a0f6892.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  validator?: (val: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  validator = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const hasError = touched && required && !validated;\n\n  const handleBlur = () => {\n    setTouched(true);\n    setValidated(validator(value));\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTouched(false);\n    onChange(event);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required or(and) invalid`}</p>\n      )}\n    </div>\n  );\n};\n","export const isURLValid = (url: string): boolean => {\n  // eslint-disable-next-line max-len\n  const patternURL = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return patternURL.test(url);\n};\n\nexport const isStrFilled = (val: string): boolean => {\n  return !!val;\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { isStrFilled, isURLValid } from '../../utils';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({\n  onAdd,\n}) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const emptyMovie: Movie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n  const [count, setCount] = useState(0);\n  const [movie, setMovie] = useState<Movie>(emptyMovie);\n  const isFormValid\n    = isStrFilled(movie.title.trim())\n    && isURLValid(movie.imgUrl.trim())\n    && isURLValid(movie.imdbUrl.trim())\n    && isStrFilled(movie.imdbId.trim());\n\n  const movieFildsValidator = (\n    val: string,\n    field: keyof Movie,\n    validFn: (val: string) => boolean,\n  ): boolean => {\n    const trimedVal = val.trim();\n\n    setMovie((prev) => ({ ...prev, [field]: trimedVal }));\n\n    return validFn(trimedVal);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMovie((prev) => ({ ...prev, [event.target.name]: event.target.value }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!isFormValid) {\n      return;\n    }\n\n    onAdd({\n      title: movie.title.trim(),\n      description: movie.description.trim(),\n      imgUrl: movie.imgUrl.trim(),\n      imdbUrl: movie.imdbUrl.trim(),\n      imdbId: movie.imdbId.trim(),\n    });\n\n    setMovie(emptyMovie);\n\n    setCount(prev => prev + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        required\n        onChange={handleChange}\n        validator={val => movieFildsValidator(val, 'title', isStrFilled)}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        required\n        onChange={handleChange}\n        validator={val => movieFildsValidator(val, 'imgUrl', isURLValid)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        required\n        onChange={handleChange}\n        validator={val => movieFildsValidator(val, 'imdbUrl', isURLValid)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        required\n        onChange={handleChange}\n        validator={val => movieFildsValidator(val, 'imdbId', isStrFilled)}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const onAddMovie = (movie: Movie) => {\n    setMovies(prev => [...prev, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}